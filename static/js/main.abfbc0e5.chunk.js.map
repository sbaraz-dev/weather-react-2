{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","sqlApi","App","useState","query","setQuery","weather","setWeather","favList","setFavList","useEffect","select","document","getElementById","fetch","then","resp","json","res","console","log","map","element","el","createElement","value","name","country","textContent","appendChild","className","temp","type","placeholder","onChange","e","target","onKeyPress","evt","key","result","fetchResult","sys","main","catch","err","error","size","id","favInfo","find","x","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","onClick","item","elementEnhalten","Array","from","forEach","option_element","window","alert","addFavorite","alignItems","method","headers","body","JSON","stringify","response","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.abfbc0e5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { VscDiffAdded } from 'react-icons/vsc';\r\nimport { ImUpload2 } from 'react-icons/im';\r\n\r\nconst api = {\r\n  key: 'ba97997bcf3c85fc91414f251a3265f9',\r\n  base: 'https://api.openweathermap.org/data/2.5/'\r\n}\r\n\r\nconst sqlApi = {\r\n  base: 'http://localhost:9191/',\r\n  getData: 'products',\r\n  pushData: 'addproducts'\r\n}\r\n\r\n// hier habe ich eine Liste der abgespeicherten Favoriten. Sie enthält aktuell nur begrenzte Infos aus der Request json.\r\n// const favList = []\r\n\r\nfunction App() {\r\n  \r\n  // KONSTANTEN hier definiert\r\n  const [query, setQuery] = useState('');\r\n  const [weather, setWeather] = useState({});\r\n  \r\n  const [favList, setFavList] = useState([]);\r\n\r\n\r\n  const search = evt => {\r\n    if (evt.key === \"Enter\") {\r\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n      .then(res => res.json()) \r\n      .then(result => {\r\n        let fetchResult = {\r\n          name: result.name,\r\n          country: result.sys.country,\r\n          temp: result.main.temp,\r\n          main: result.weather[0].main}\r\n        setWeather(fetchResult);\r\n        setQuery('');\r\n        console.log(fetchResult);       \r\n      })\r\n      .catch((err) => console.error('Fehler' + err))\r\n    }\r\n  }\r\n  \r\n  const searchByFavorite = evt => {\r\n    // setQuery(evt.target.value);\r\n    const favInfo = favList.find(x => evt.target.value === `${x.name}, ${x.country}`);\r\n    \r\n    if (typeof favInfo === 'undefined') {\r\n      console.log('typfehler');\r\n    } else {\r\n      setWeather(favInfo);     \r\n    }\r\n  }\r\n\r\n  const dateBuilder = (d) => {\r\n    let months = [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"];\r\n    let days = [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n  }\r\n\r\n  // FUNKTIONEN hier definiert\r\n  function addFavorite(item) {\r\n    \r\n    var select = document.getElementById('fav-box-id'); \r\n    var elementEnhalten = false;\r\n    \r\n    Array.from(select).forEach(function(option_element) {\r\n      if (option_element.value == item) {\r\n        window.alert(`${item} ist bereits in den Favoriten enthalten!`);\r\n        elementEnhalten = true;\r\n        return;\r\n      } \r\n    });\r\n    if (elementEnhalten) {\r\n      return\r\n    }\r\n    \r\n    var el = document.createElement('option');\r\n    el.value = item;\r\n    el.textContent = item;\r\n    select.appendChild(el);\r\n    // window.alert(`Sie haben ${item} zu den Favoriten hinzugefügt.`)\r\n    \r\n    setFavList( favList => [\r\n      ...favList,\r\n      weather\r\n    ])\r\n  }\r\n\r\n  function uploadFavorite() {\r\n    fetch(sqlApi.base + sqlApi.pushData, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(favList),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log('Success:', data);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error:', error);\r\n    });\r\n  }\r\n\r\n  \r\n  // ONEFFECT Event hier notiert\r\n  useEffect(() => {\r\n    const select = document.getElementById('fav-box-id');\r\n    fetch('http://localhost:9191/products')\r\n    .then(resp => resp.json())\r\n    .then(res => {\r\n      console.log('Aus Datenbank gezogene Daten: ', res);\r\n      res.map(element => {\r\n        setFavList(favList => [\r\n          ...favList,\r\n          element]);\r\n        var el = document.createElement('option');\r\n        el.value = `${element.name}, ${element.country}`;\r\n        el.textContent = `${element.name}, ${element.country}`;\r\n        select.appendChild(el);\r\n      })\r\n    })\r\n\r\n  }, [])\r\n  \r\n\r\n  // Programm Struktur wird hier generiert\r\n  return (\r\n    <div  className={(typeof weather != 'undefined') ? ((weather.temp > 16) ? ('app warm') : ('app')) : ('app')}>\r\n      <main >\r\n        <div className=\"search-box\">\r\n          <input \r\n            type=\"text\"\r\n            className=\"search-bar\"\r\n            placeholder=\"Ort suchen ...\"\r\n            onChange={e => setQuery(e.target.value)}\r\n            value={query}\r\n            onKeyPress={search}\r\n            ></input>\r\n        </div>\r\n\r\n        <div className=\"favoriten-box\">\r\n          <div className=\"kopf\">\r\n            Favoriten\r\n          </div>\r\n          <div className=\"körper\">\r\n            <select \r\n              className=\"auswahlbox\" \r\n              size=\"1\" id='fav-box-id' \r\n              onChange={searchByFavorite}>\r\n              value={query}\r\n              //hier ist die Liste der Favoriten\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {(typeof weather.main != 'undefined') ? (\r\n        <div className=\"info-box\">\r\n          <div className=\"location-box\">\r\n            <div className=\"location\" id=\"location-id\">{weather.name}, {weather.country}</div>\r\n            <div className=\"date\">{dateBuilder(new Date())}</div>\r\n          </div>\r\n          <div className=\"weather-box\">\r\n            <div className=\"temp\" id=\"temp-id\">\r\n                {Math.round(weather.temp)}°C\r\n            </div>\r\n            <div className=\"weather\">\r\n              {weather.main}\r\n            </div>\r\n          </div>\r\n        \r\n          <div className=\"add-favorite-box\">\r\n            <button \r\n              className=\"add-favorite-button\"\r\n              onClick={() => addFavorite(`${weather.name}, ${weather.country}`)}\r\n              alignItems='center'\r\n              >\r\n              <div className=\"fav-icon\">\r\n                <VscDiffAdded size=\"25px\"/>\r\n              </div>\r\n              <div className=\"fav-text\">Favorit hinzufügen</div> \r\n            </button>\r\n\r\n          \r\n            <button \r\n              className=\"upload-favorite-button\"\r\n              onClick={() => uploadFavorite()}\r\n              alignItems='center'\r\n              >\r\n              <div className=\"upload-icon\">\r\n                <ImUpload2 size=\"25px\"/>\r\n              </div>\r\n              <div className=\"up-fav-text\">Favoriten hochladen</div> \r\n            </button>\r\n          </div>\r\n          \r\n          \r\n        </div> \r\n        ) : ('')}\r\n\r\n\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}